<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>net45;netstandard2.0</TargetFrameworks>
    <Version>0.8.2-preview1</Version>
    <AssemblyName>Senparc.CO2NET</AssemblyName>
    <RootNamespace>Senparc.CO2NET</RootNamespace>
    <GeneratePackageOnBuild Condition=" '$(Configuration)' == 'Release' ">true</GeneratePackageOnBuild>

    <Description>
      Senparc.CO2NET 公共基础库

      Senparc.Weixin SDK 开源项目：
      https://github.com/Senparc/Senparc.CO2NET
    </Description>
    <Copyright>Senparc Copyright © 2004~2018</Copyright>
    <PackageTags>.NET Core,.NET Framework,公共,基础库,CO2NET</PackageTags>

    <Authors>Senparc</Authors>
    <Owners>Senparc</Owners>
    <PackageLicenseUrl>https://github.com/Senparc/Senparc.CO2NET/blob/master/license.md</PackageLicenseUrl>
    <ProjectUrl>https://github.com/Senparc/Senparc.CO2NET</ProjectUrl>
    <Title>Senparc.CO2NET.dll</Title>

    <Summary>Senparc.CO2NET 公共基础库</Summary>
    <PackageProjectUrl>https://github.com/Senparc/Senparc.CO2NET</PackageProjectUrl>
    <PackageIconUrl>http://sdk.weixin.senparc.com/Images/Logo.jpg</PackageIconUrl>
    <PackageReleaseNotes>
      v0.1.0 构建基础代码，从 Senparc.Weixin 分离公共代码
      v0.1.1 优化代码，单元测试接近100%覆盖
      v0.1.2 添加 IDomainExtensionCacheStrategy.RegisterCacheStrategyDomain() 方法
      v0.1.3 添加 EntityUtility.FillSystemType()方法对 Int32[] 和 Int64[] 的处理
      v0.1.4 添加 SenparcSetting 全局配置属性
      v0.1.5 RegisterServiceExtension.AddSenparcGlobalServices() 方法可自动获取 SenparcSetting 全局设置
      v0.1.6 解决 XXE 漏洞，继承自 XmlDocument 对象，自动将 XmlResolver 设为 null
      v0.1.6.1 添加 Register.UseSenparcGlobal() 方法
      v0.1.7 扩展 ReflectionHelper.GetStaticMember() 方法
      v0.1.8 .net core 下的 RegisterService.Start() 方法中，env 可以传入 null，以便在控制台等环境中完成注册
      v0.1.9
      1、RegisterService 取消 public 的构造函数，统一使用 RegisterService.Start() 初始化
      2、重构 Register.UseSenparcGlobal() 方法，承担扩展缓存扫描功能
      3、添加 UnregisteredDomainCacheStrategyException 异常类型
      4、 .net framework 和 .net core 版本统一强制在构造函数中要求提供 SenparcSetting 参数
      v0.1.10 调整 SenparcSetting 参数，将分布式缓存连接信息归入到 SenparcSetting 中
      v0.1.11 提供 SenparcSetting.BuildFromWebConfig() 方法

      v0.2.0 缓存策略提供超时设置接口
      v0.2.1 “当前扩展缓存策略没有进行注册”异常信息提供更加详细的缓存类型信息
      v0.2.2 RequestExtension 添加对 NETSTANDARD2_0 的支持
      v0.2.3 优化 RequestExtension.AbsoluteUri() 方法的输出结果
      v0.2.4
      1、添加 CacheException 缓存异常类型
      2、添加对 IMemoryCache 的未设置提示
      3、优化 UnregisteredDomainCacheStrategyException，使用 CacheException 作为基类
      v0.2.5 优化 SenparcID，其中所有方法支持 .net standard 2.0
      v0.2.6 增加 DateTimeHelper.GetUnixDateTime() 方法，标记过期 GetWeixinDateTime() 方法
      v0.2.7 添加 ServerUtility
      v0.2.8 添加 SenparcDI.GetIServiceProvider() 方法，以支持其他依赖注入框架
      v0.2.9
      1、优化 Config.RootDictionaryPath 方法，可自动获取默认值
      2、添加 SerializerHelper.GetObject(this string jsonString, Type type) 方法
      v0.2.10 ObjectExtensions.ToJson() 方法提供 indented 方法，支持缩进格式
      v0.2.11 修复 .NET Core 下模拟表单 Post 参数无效的问题
      v0.2.14 ToJson() 方法优化
      v0.2.15 Post 方法添加 headerAddition参数
      v0.2.17 启用 SystemTime.Now，方便单元测试或紧急情况下改动系统当前时间
      v0.2.18 支持 Senparc.CO2NET.APM
      v0.3.0 升级 SenparcTrace，使用队列
      v0.3.1 更新 RequestUtility.GetQueryString() 方法
      v0.4.0 使用 .NETStandard2.0 统一支持 .NET Core，放弃对 .NET Core 1.x 的单独适配
      v0.4.1 为 UrlEncode() 和 UrlDecode() 方法添加在 .net framework 环境下的编码类型选择
      v0.4.2 优化 ServerUtility 类中方法在 docker 或 linux 环境下的路径识别
      v0.4.3 使用 DateTimeOffset 取代 DateTime
      v0.4.4 提供 SenparcTrace.RecordAPMLog 参数RequestUtility.Post.cs
      v0.5.0 提供对 .NET Core Console 的全面支持
      v0.5.1 ToJson() 方法添加 jsonSerializerSettings 参数
      v0.5.1.1 添加 Sex.未设置 枚举值
      v0.5.2 添加 SenparcDI.GetRequiredService() 方法，提供线程内独立 ServiceProvider 实例
      v0.6.0 提供缓存异步接口
      v0.6.1 完善 SystemTime，添加 NowTicks 属性
      v0.7.0 优化 HttpClient，重构 RequestUtility（包括 Post 和 Get），引入 HttpClientFactory 机制
      v0.7.1
      1、添加 NowDiff 属性
      2、添加 DayOfWeekString、DILifecycleType 配置和枚举
      v0.7.1
      1、添加 NowDiff 属性
      2、添加 DayOfWeekString、DILifecycleType 配置和枚举
      3、修复：.NET 4.5 下 Post 方法未指定 content-type
      v0.7.2.1 解决 GetHttpClientHandler() 方法中 cookieContainer 为 null 可能发生的异常
      v0.7.3
      1、添加 HttpClientFactory 多证书方案
      2、使用 .ConfigureAwait(false) 避免异步锁死的情况
      v0.8 
      1、停止提供对 .NET 3.5/4.0 的支持
      2、使用异步方法提升并发效率
    </PackageReleaseNotes>
    <RepositoryUrl>https://github.com/Senparc/Senparc.CO2NET</RepositoryUrl>
    <Configurations>Debug;Release;Test</Configurations>

  </PropertyGroup>


  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <OutputPath>..\BuildOutPut</OutputPath>
    <DefineConstants>TRACE;RELEASE</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Release|x86'">
    <OutputPath>..\BuildOutPut</OutputPath>
    <DefineConstants>$(DefineConstants);RELEASE</DefineConstants>
    <DocumentationFile>..\BuildOutPut\Senparc.CO2NET.xml</DocumentationFile>
    <Optimize>true</Optimize>
    <DebugType>pdbonly</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>


  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|net45|AnyCPU'">
    <OutputPath>..\BuildOutPut\</OutputPath>
    <DocumentationFile>..\BuildOutPut\net45\Senparc.CO2NET.xml</DocumentationFile>
  </PropertyGroup>


  <!--<PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|netstandard1.6|AnyCPU'">
    <OutputPath>..\BuildOutPut\</OutputPath>
    <DocumentationFile>..\BuildOutPut\netstandard1.6\Senparc.CO2NET.xml</DocumentationFile>
  </PropertyGroup>-->


  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|netstandard2.0|AnyCPU'">
    <OutputPath>..\BuildOutPut\</OutputPath>
    <DocumentationFile>..\BuildOutPut\netstandard2.0\Senparc.CO2NET.xml</DocumentationFile>
  </PropertyGroup>

  <ItemGroup>
    <Compile Remove="Cache\Lock\CacheLockWrapper.cs" />
    <Compile Remove="Cache\Lock\CacheLockWrapperExtension.cs" />
    <Compile Remove="Trace\SenparcTrace.v0.2.18.cs" />
  </ItemGroup>


  <ItemGroup>
    <PackageReference Include="Newtonsoft.Json" Version="12.0.1" />
  </ItemGroup>

  <ItemGroup Condition=" '$(TargetFramework)' == 'net45' ">
    <Reference Include="System.Core" />
    <Reference Include="System.Data" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="System.Net.Http" />
    <Reference Include="System.Runtime.Serialization" />
    <Reference Include="System.Web" />
    <Reference Include="System.Web.Extensions" />
    <Reference Include="System.Xml" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Configuration" />
  </ItemGroup>

  <ItemGroup Condition=" '$(TargetFramework)' == 'netstandard2.0' ">
    <PackageReference Include="Microsoft.AspNetCore.Http.Abstractions" Version="2.2.0" />
    <PackageReference Include="Microsoft.AspNetCore.Hosting" Version="2.2.0" />
    <!--<PackageReference Include="System.Dynamic.Runtime" Version="4.3.0" />-->
    <PackageReference Include="System.Threading.Thread" Version="4.3.0" />
    <PackageReference Include="System.Xml.XmlSerializer" Version="4.3.0" />
    <PackageReference Include="System.Diagnostics.TraceSource" Version="4.3.0" />
    <PackageReference Include="Microsoft.AspNetCore.Http" Version="2.2.0" />
    <PackageReference Include="Microsoft.Extensions.Options.ConfigurationExtensions" Version="2.2.0" />
    <PackageReference Include="Microsoft.Extensions.Caching.Abstractions" Version="2.2.0" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="2.2.0" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="Utilities\Cache\" />
  </ItemGroup>

  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
    <PackageReference Include="Microsoft.Extensions.Http">
      <Version>2.2.0</Version>
    </PackageReference>
  </ItemGroup>

</Project>
